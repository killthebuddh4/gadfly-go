std.write "#######################################################" end
std.write "" "" end
std.write "Testing gadfly.array package..." end
std.write "" "" end
std.write "#######################################################" end
std.write "" "" end

#
#
# test data
#
#

def numbers
  array
    2 4 6 7 8 10
  end
end

def numbers_clone
  array.map numbers
    fn |ab: Number i: Number|
      ab
    end -> Number
  end
end -> Array


def numbers_and_twenty
  array 2 4 6 7 8 10 20 end
end

def numbers_without_ten
  array 2 4 6 7 8 end
end

def numbers_without_two
  array 4 6 7 8 10 end
end

def numbers_with_zero
  array 0 2 4 6 7 8 10 end
end

def numbers_sum 37 end

def squares
  array 4 16 36 49 64 100 end
end

def evens
  array 2 4 6 8 10 end
end

def test_val nil end

#
#
# array.Read
#
#

let test_val
  array.read numbers 2 end
end

if
  test_val != 6
  std.write "FAIL: array.Read" end
  std.write "PASS: array.Read" end
end

#
#
# array.Write
#
#

array.write numbers 2 12 end

let test_val array.read numbers 2 end

if
  test_val != 6
  std.write "FAIL: array.Write immutability" end
  std.write "PASS: array.Write immutability" end
end

def new_numbers
  array.write numbers 2 12 end
end

let test_val
  array.read new_numbers 2 end
end

if
  test_val != 12
  std.write "FAIL: array.Write" end
  std.write "PASS: array.Write" end
end

#
#
# array.For
#
#

let test_val 0 end

array.for numbers
  fn |a i|
    let test_val test_val + a end
  end
end

if
  test_val != numbers_sum
  std.write "FAIL: array.For" end
  std.write "PASS: array.For" end
end

#
#
# array.Map
#
#

let test_val
  array.map numbers
    fn |a i|
      a * a
    end
  end
end

def squares_worked
  .equal test_val squares end
end

if squares_worked == false
  std.write "FAIL: array.Map" end
  std.write "PASS: array.Map" end
end 

#
#
# array.Filter
#
#

let test_val
  array.filter numbers
    fn |a i|
      def rem
        .math.mod a 2 end
      end

      rem == 0
    end
  end
end

def evens_worked
  .equal test_val evens end
end

if evens_worked == false
  std.write "FAIL: array.Filter" end
  std.write "PASS: array.Filter" end
end

#
#
# array.Reduce
#
#

let test_val
  array.reduce
    numbers

    0

    fn |acc a i|
      acc + a
    end
  end
end

if
  test_val != numbers_sum
  std.write "FAIL: array.Reduce" end
  std.write "PASS: array.Reduce" end
end

#
#
# array.Push
#
#

array.push numbers 20 end

def push_is_immutable
  .equal numbers_clone numbers end
end

if push_is_immutable == false
  std.write "FAIL: array.Push immutability" end
  std.write "PASS: array.Push immutability" end
end

let test_val
  array.push numbers 20 end
end

def push_worked
  .equal test_val numbers_and_twenty end
end

if push_worked == false
  std.write "FAIL: array.Push" end
  std.write "PASS: array.Push" end
end

#
#
# array.Pop
#
#

array.pop numbers end

def pop_is_immutable
  .equal numbers_clone numbers end
end

if pop_is_immutable == false
  std.write "FAIL: array.Pop immutability" end
  std.write "PASS: array.Pop immutability" end
end

let test_val
  array.pop numbers end
end

def pop_worked
  .equal test_val numbers_without_ten end
end

if pop_worked == false
  std.write "FAIL: array.Pop" end
  std.write "PASS: array.Pop" end
end

#
#
# array.Shift
#
#

array.shift numbers end

def shift_is_immutable
  .equal numbers_clone numbers end
end

if shift_is_immutable == false
  std.write "FAIL: array.Shift immutability" end
  std.write "PASS: array.Shift immutability" end
end

let test_val
  array.shift numbers end
end

def shift_worked
  .equal test_val numbers_without_two end
end

if shift_worked == false
  std.write "FAIL: array.Shift" end
  std.write "PASS: array.Shift" end
end

#
#
# array.Unshift
#
#

array.unshift numbers 0 end

def unshift_is_immutable
  .equal numbers_clone numbers end
end

if unshift_is_immutable == false
  std.write "FAIL: array.Unshift immutability" end
  std.write "PASS: array.Unshift immutability" end
end

let test_val
  array.unshift numbers 0 end
end

def unshift_worked
  .equal test_val numbers_with_zero end
end

if unshift_worked == false
  std.write "FAIL: array.Unshift" end
  std.write "PASS: array.Unshift" end
end